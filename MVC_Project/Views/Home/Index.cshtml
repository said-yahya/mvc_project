@{
    ViewData["Title"] = "Dashboard";
 
}

<div class="row">
    <div class="col-lg-8 mb-4">
        <div class="card z-index-2 h-100">
            <div class="card-header pb-0 pt-3 d-flex justify-content-between align-items-center">
                <div>
                    <h6 class="text-capitalize mb-0">Stock overview</h6>
                    <p class="text-sm mb-0"><span id="stockSymbol" class="font-weight-bold">MSFT</span> • <span id="stockRange">1D</span> • <span id="stockChange"></span></p>
                </div>
                <div class="btn-group" role="group" aria-label="Range">
                    <button class="btn btn-sm btn-outline-primary" data-range="1D">1D</button>
                    <button class="btn btn-sm btn-outline-primary" data-range="1W">1W</button>
                    <button class="btn btn-sm btn-outline-primary" data-range="1M">1M</button>
                </div>
            </div>
            <div class="card-body p-3">
                <div class="chart">
                    <canvas id="chart-line" class="chart-canvas" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="card h-100">
            <div class="card-header pb-0">
                <h6>Popular stocks (today)</h6>
            </div>
            <div class="card-body px-0 pt-0 pb-2">
                <div class="table-responsive p-0">
                    <table class="table align-items-center mb-0">
                        <thead>
                            <tr>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Symbol</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Price</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Change</th>
                            </tr>
                        </thead>
                        <tbody id="popularBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
(function(){
    const ctx = document.getElementById('chart-line').getContext('2d');
    let chart;
    const symbolEl = document.getElementById('stockSymbol');
    const rangeEl = document.getElementById('stockRange');
    let currentSymbol = 'MSFT';
    let currentRange = '1D';

    async function fetchSeries(symbol, range){
        const url = `/Home/Range?symbol=${encodeURIComponent(symbol)}&range=${encodeURIComponent(range)}`;
        const res = await fetch(url, { headers: { 'Accept': 'application/json' } });
        if(!res.ok) throw new Error('Failed to fetch series');
        return await res.json();
    }

    function toDataset(series){
        const labels = series.points.map(p => new Date(p.timestamp));
        const data = series.points.map(p => p.close);
        return { labels, data };
    }

    function renderChart(dataset){
        const data = {
            labels: dataset.labels,
            datasets: [{
                label: `${currentSymbol}`,
                tension: 0.4,
                borderWidth: 3,
                pointRadius: 0,
                borderColor: '#5e72e4',
                backgroundColor: 'rgba(94,114,228,0.1)',
                fill: true,
                data: dataset.data
            }]
        };
        const options = {
            responsive: true,
            maintainAspectRatio: false,
            scales: { x: { ticks: { callback: (v, i)=>{ const d = data.labels[i]; return d.toLocaleDateString() + ' ' + d.toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'}); } } } }
        };
        if(chart){ chart.destroy(); }
        chart = new Chart(ctx, { type: 'line', data, options });
    }

    async function load(symbol, range){
        symbolEl.textContent = symbol;
        rangeEl.textContent = range;
        const series = await fetchSeries(symbol, range);
        renderChart(toDataset(series));
        updateChange(series);
    }

    function updateChange(series){
        const el = document.getElementById('stockChange');
        if (!series || !series.points || series.points.length < 2){ el.textContent = ''; return; }
        const first = series.points[0].close;
        const last = series.points[series.points.length - 1].close;
        const pct = ((last - first) / first) * 100;
        const sign = pct >= 0 ? '+' : '';
        const color = pct >= 0 ? 'text-success' : 'text-danger';
        el.className = color;
        el.textContent = `${sign}${pct.toFixed(2)}%`;
    }

    document.querySelectorAll('[data-range]').forEach(btn => {
        btn.addEventListener('click', async () => {
            document.querySelectorAll('[data-range]').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            currentRange = btn.getAttribute('data-range');
            await load(currentSymbol, currentRange);
        });
    });

    // Navbar search -> update symbol
    const search = document.getElementById('navbarSearch');
    if (search){
        async function doSearch(){
            const raw = (search.value || '').trim();
            if (!raw) return;
            // Try resolve name to symbol first
            let symbol = raw.toUpperCase();
            try {
                const r = await fetch(`/Home/Resolve?q=${encodeURIComponent(raw)}`);
                if (r.ok){
                    const j = await r.json();
                    if (j.symbol) symbol = j.symbol;
                }
            } catch(e) {}
            currentSymbol = symbol;
            await load(currentSymbol, currentRange);
        }
        search.addEventListener('keydown', async (e) => {
            if (e.key === 'Enter'){
                e.preventDefault();
                await doSearch();
            }
        });
        // click on loupe triggers search too
        const loupe = search.previousElementSibling;
        if (loupe){
            loupe.addEventListener('click', async () => { await doSearch(); });
        }
    }

    async function loadPopular(){
        const res = await fetch('/Home/Popular', { headers: { 'Accept': 'application/json' } });
        if(!res.ok) return;
        const rows = await res.json();
        const body = document.getElementById('popularBody');
        body.innerHTML = '';
        rows.forEach(r => {
            const tr = document.createElement('tr');
            const pct = Number(r.changePercent);
            const sign = pct >= 0 ? '+' : '';
            const color = pct >= 0 ? 'text-success' : 'text-danger';
            tr.innerHTML = `<td><span class="text-xs font-weight-bold">${r.symbol}</span></td><td><span class="text-xs">$${Number(r.price).toFixed(2)}</span></td><td><span class="text-xs ${color}">${sign}${pct.toFixed(2)}%</span></td>`;
            body.appendChild(tr);
        });
    }

    // initial
    // set default active 1D
    const defaultBtn = document.querySelector('[data-range="1D"]');
    if (defaultBtn) defaultBtn.classList.add('active');
    load(currentSymbol, currentRange).catch(console.error);
    loadPopular().catch(console.error);
})();
</script>
}
